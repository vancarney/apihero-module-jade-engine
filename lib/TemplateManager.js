// Generated by CoffeeScript 1.9.3
var EventEmitter, TemplateManager, _, fs, jade, path,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

fs = require('fs-extra');

_ = require('lodash')._;

path = require('path');

EventEmitter = require('events').EventEmitter;

jade = module.parent.exports.jade.jade;

TemplateManager = (function(superClass) {
  'use strict';
  extend(TemplateManager, superClass);

  TemplateManager.prototype.dependencies = {};

  function TemplateManager() {}

  TemplateManager.prototype.processConfig = function(config) {
    var getTemplate;
    this.out = '';
    getTemplate = (function(_this) {
      return function(template) {
        var t;
        if (template.match(/\.[a-z]*$/i)) {
          _this.root = "" + (path.dirname(template)) + path.sep;
          t = _this.processTemplate(template);
        } else {
          _this.root = "" + template + path.sep;
          t = _this.compileDirectory(template);
        }
        return "\n\n" + t;
      };
    })(this);
    if (config.templates != null) {
      switch (typeof config.templates) {
        case 'string':
          this.out += getTemplate(config.templates);
          break;
        case 'object':
          _.each(config.templates, (function(_this) {
            return function(t) {
              return _this.out += getTemplate(t);
            };
          })(this));
          break;
        default:
          console.log("config.templates was unprocessable");
      }
    }
    return this.out;
  };

  TemplateManager.prototype.processTemplate = function(fileName, opts) {
    var e, options, refName, result;
    if (opts == null) {
      opts = {};
    }
    options = _.extend({
      filename: path.join(path.dirname(fileName), path.basename(fileName))
    }, opts);
    refName = (options.filename.replace(this.root, '')).split('.')[0];
    try {
      result = jade.compileFileClient(fileName, options);
    } catch (_error) {
      e = _error;
      return this.emit('error', e);
    }
    result = result.replace(/^(function)\stemplate/, '$1');
    return "module.exports['" + refName + "'] = " + result + ";";
  };

  TemplateManager.prototype.compileDirectory = function(dir) {
    var _path, e, file, files, i, len, out, stat;
    files = fs.readdirSync(dir);
    out = '';
    for (i = 0, len = files.length; i < len; i++) {
      file = files[i];
      try {
        stat = fs.statSync(_path = path.join(dir, file));
      } catch (_error) {
        e = _error;
        console.log("unable to stat file: " + _path);
        continue;
      }
      out += stat.isFile() ? "\n\n" + (this.processTemplate(_path)) : this.compileDirectory(path.join(dir, file));
    }
    return out;
  };

  TemplateManager.prototype.save = function(path, callback) {
    return fs.writeFile(path, this.out, callback);
  };

  return TemplateManager;

})(EventEmitter);

module.exports = TemplateManager;
